// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/blobstore-backup-restore/s3"
)

type FakeVersionedBucket struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	RegionNameStub        func() string
	regionNameMutex       sync.RWMutex
	regionNameArgsForCall []struct{}
	regionNameReturns     struct {
		result1 string
	}
	regionNameReturnsOnCall map[int]struct {
		result1 string
	}
	CopyVersionStub        func(blobKey, versionId, originBucketName, originBucketRegion string) error
	copyVersionMutex       sync.RWMutex
	copyVersionArgsForCall []struct {
		blobKey            string
		versionId          string
		originBucketName   string
		originBucketRegion string
	}
	copyVersionReturns struct {
		result1 error
	}
	copyVersionReturnsOnCall map[int]struct {
		result1 error
	}
	ListVersionsStub        func() ([]s3.Version, error)
	listVersionsMutex       sync.RWMutex
	listVersionsArgsForCall []struct{}
	listVersionsReturns     struct {
		result1 []s3.Version
		result2 error
	}
	listVersionsReturnsOnCall map[int]struct {
		result1 []s3.Version
		result2 error
	}
	CheckIfVersionedStub        func() error
	checkIfVersionedMutex       sync.RWMutex
	checkIfVersionedArgsForCall []struct{}
	checkIfVersionedReturns     struct {
		result1 error
	}
	checkIfVersionedReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVersionedBucket) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *FakeVersionedBucket) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeVersionedBucket) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeVersionedBucket) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeVersionedBucket) RegionName() string {
	fake.regionNameMutex.Lock()
	ret, specificReturn := fake.regionNameReturnsOnCall[len(fake.regionNameArgsForCall)]
	fake.regionNameArgsForCall = append(fake.regionNameArgsForCall, struct{}{})
	fake.recordInvocation("RegionName", []interface{}{})
	fake.regionNameMutex.Unlock()
	if fake.RegionNameStub != nil {
		return fake.RegionNameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.regionNameReturns.result1
}

func (fake *FakeVersionedBucket) RegionNameCallCount() int {
	fake.regionNameMutex.RLock()
	defer fake.regionNameMutex.RUnlock()
	return len(fake.regionNameArgsForCall)
}

func (fake *FakeVersionedBucket) RegionNameReturns(result1 string) {
	fake.RegionNameStub = nil
	fake.regionNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeVersionedBucket) RegionNameReturnsOnCall(i int, result1 string) {
	fake.RegionNameStub = nil
	if fake.regionNameReturnsOnCall == nil {
		fake.regionNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.regionNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeVersionedBucket) CopyVersion(blobKey string, versionId string, originBucketName string, originBucketRegion string) error {
	fake.copyVersionMutex.Lock()
	ret, specificReturn := fake.copyVersionReturnsOnCall[len(fake.copyVersionArgsForCall)]
	fake.copyVersionArgsForCall = append(fake.copyVersionArgsForCall, struct {
		blobKey            string
		versionId          string
		originBucketName   string
		originBucketRegion string
	}{blobKey, versionId, originBucketName, originBucketRegion})
	fake.recordInvocation("CopyVersion", []interface{}{blobKey, versionId, originBucketName, originBucketRegion})
	fake.copyVersionMutex.Unlock()
	if fake.CopyVersionStub != nil {
		return fake.CopyVersionStub(blobKey, versionId, originBucketName, originBucketRegion)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.copyVersionReturns.result1
}

func (fake *FakeVersionedBucket) CopyVersionCallCount() int {
	fake.copyVersionMutex.RLock()
	defer fake.copyVersionMutex.RUnlock()
	return len(fake.copyVersionArgsForCall)
}

func (fake *FakeVersionedBucket) CopyVersionArgsForCall(i int) (string, string, string, string) {
	fake.copyVersionMutex.RLock()
	defer fake.copyVersionMutex.RUnlock()
	return fake.copyVersionArgsForCall[i].blobKey, fake.copyVersionArgsForCall[i].versionId, fake.copyVersionArgsForCall[i].originBucketName, fake.copyVersionArgsForCall[i].originBucketRegion
}

func (fake *FakeVersionedBucket) CopyVersionReturns(result1 error) {
	fake.CopyVersionStub = nil
	fake.copyVersionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVersionedBucket) CopyVersionReturnsOnCall(i int, result1 error) {
	fake.CopyVersionStub = nil
	if fake.copyVersionReturnsOnCall == nil {
		fake.copyVersionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyVersionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVersionedBucket) ListVersions() ([]s3.Version, error) {
	fake.listVersionsMutex.Lock()
	ret, specificReturn := fake.listVersionsReturnsOnCall[len(fake.listVersionsArgsForCall)]
	fake.listVersionsArgsForCall = append(fake.listVersionsArgsForCall, struct{}{})
	fake.recordInvocation("ListVersions", []interface{}{})
	fake.listVersionsMutex.Unlock()
	if fake.ListVersionsStub != nil {
		return fake.ListVersionsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listVersionsReturns.result1, fake.listVersionsReturns.result2
}

func (fake *FakeVersionedBucket) ListVersionsCallCount() int {
	fake.listVersionsMutex.RLock()
	defer fake.listVersionsMutex.RUnlock()
	return len(fake.listVersionsArgsForCall)
}

func (fake *FakeVersionedBucket) ListVersionsReturns(result1 []s3.Version, result2 error) {
	fake.ListVersionsStub = nil
	fake.listVersionsReturns = struct {
		result1 []s3.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionedBucket) ListVersionsReturnsOnCall(i int, result1 []s3.Version, result2 error) {
	fake.ListVersionsStub = nil
	if fake.listVersionsReturnsOnCall == nil {
		fake.listVersionsReturnsOnCall = make(map[int]struct {
			result1 []s3.Version
			result2 error
		})
	}
	fake.listVersionsReturnsOnCall[i] = struct {
		result1 []s3.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionedBucket) CheckIfVersioned() error {
	fake.checkIfVersionedMutex.Lock()
	ret, specificReturn := fake.checkIfVersionedReturnsOnCall[len(fake.checkIfVersionedArgsForCall)]
	fake.checkIfVersionedArgsForCall = append(fake.checkIfVersionedArgsForCall, struct{}{})
	fake.recordInvocation("CheckIfVersioned", []interface{}{})
	fake.checkIfVersionedMutex.Unlock()
	if fake.CheckIfVersionedStub != nil {
		return fake.CheckIfVersionedStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.checkIfVersionedReturns.result1
}

func (fake *FakeVersionedBucket) CheckIfVersionedCallCount() int {
	fake.checkIfVersionedMutex.RLock()
	defer fake.checkIfVersionedMutex.RUnlock()
	return len(fake.checkIfVersionedArgsForCall)
}

func (fake *FakeVersionedBucket) CheckIfVersionedReturns(result1 error) {
	fake.CheckIfVersionedStub = nil
	fake.checkIfVersionedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVersionedBucket) CheckIfVersionedReturnsOnCall(i int, result1 error) {
	fake.CheckIfVersionedStub = nil
	if fake.checkIfVersionedReturnsOnCall == nil {
		fake.checkIfVersionedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.checkIfVersionedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVersionedBucket) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.regionNameMutex.RLock()
	defer fake.regionNameMutex.RUnlock()
	fake.copyVersionMutex.RLock()
	defer fake.copyVersionMutex.RUnlock()
	fake.listVersionsMutex.RLock()
	defer fake.listVersionsMutex.RUnlock()
	fake.checkIfVersionedMutex.RLock()
	defer fake.checkIfVersionedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVersionedBucket) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ s3.VersionedBucket = new(FakeVersionedBucket)
